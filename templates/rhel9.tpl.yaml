apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: {{ os }}
  annotations:
    openshift.io/display-name: "Red Hat Enterprise Linux 9.0 Beta VM"
    description: >-
      Template for Red Hat Enterprise Linux 9 VM or newer.
      A PVC with the RHEL disk image must be available.
      Red Hat Enterprise Linux Beta releases are made 
      available only for testing purposes. Red Hat provides 
      these Beta releases and revisions as a courtesy to 
      facilitate early testing by users prior to a Generally 
      Availability (GA) release, and to solicit feedback 
      from users on the Beta functionality. Red Hat does 
      not support the usage of RHEL Beta releases in 
      production use cases. 
      NOTE: Beta cases are handled as Severity 4. 
      Upgrading to or from any RHEL Beta release is not an upgrade 
      path that is supported by Red Hat. Red Hat Enterprise Linux Beta 
      deployments cannot be directly updated to a non-beta 
      Red Hat Enterprise Linux release, or vice-versa.
    tags: "hidden,kubevirt,virtualmachine,linux,rhel"
    iconClass: "icon-{{ icon }}"
    openshift.io/provider-display-name: "KubeVirt"
    openshift.io/documentation-url: "https://github.com/kubevirt/common-templates"
    openshift.io/support-url: "https://github.com/kubevirt/common-templates/issues"
    template.openshift.io/bindable: "false"
    template.kubevirt.io/version: v1alpha1
    defaults.template.kubevirt.io/disk: rootdisk
    template.kubevirt.io/containerdisks: |
      registry.redhat.io/rhel9-beta/rhel-guest-image
    template.kubevirt.io/editable: |
      /objects[0].spec.flavor
      /objects[0].spec.preference
      /objects[0].spec.template.spec.domain.cpu.threads
      /objects[0].spec.template.spec.domain.resources.requests.memory
      /objects[0].spec.template.spec.domain.devices.disks
      /objects[0].spec.template.spec.volumes
      /objects[0].spec.template.spec.networks
{% for osl in oslabels %}
    name.os.template.kubevirt.io/{{ osl }}: {{ lookup('osinfo', oslabels[0]).name }} or higher
{% endfor %}
  labels:
{% for osl in oslabels %}
    os.template.kubevirt.io/{{ osl }}: "true"
{% endfor %}
    template.kubevirt.io/type: "base"
    template.kubevirt.io/version: "{{ lookup('env', 'VERSION') | default('devel', true) }}"
objects:
- apiVersion: kubevirt.io/v1
  kind: VirtualMachine
  metadata:
    name: ${NAME}
    labels:
      vm.kubevirt.io/template: {{ os }}
      vm.kubevirt.io/template.version: "{{ lookup('env', 'VERSION') | default('devel', true) }}"
      vm.kubevirt.io/template.revision: "{{ lookup('env', 'REVISION') | default(1, true) }}"
      app: ${NAME}
    annotations:
      vm.kubevirt.io/validations: |
        [
          {
            "name": "minimal-required-memory",
            "path": "jsonpath::.spec.domain.resources.requests.memory",
            "rule": "integer",
            "message": "This VM requires more memory.",
            "min": {{ lookup('osinfo', osinfoname)["minimum_resources.architecture=x86_64|all.ram"] }}
          }
        ]
  spec:
    flavor:
      name: ${FLAVOR_NAME}
      Kind: VirtualMachineFlavor
    preference:
      name: ${PREFERENCE_NAME}
      Kind: VirtualMachinePreference
    dataVolumeTemplates:
    - apiVersion: cdi.kubevirt.io/v1beta1
      kind: DataVolume
      metadata:
        name: ${NAME}
      spec:
        storage:
          resources:
            requests:
              storage: 30Gi
        sourceRef:
          kind: DataSource
          name: ${DATA_SOURCE_NAME}
          namespace: ${DATA_SOURCE_NAMESPACE}
    running: false
    template:
      metadata:
        annotations:
          vm.kubevirt.io/os: "{{ os }}"
        labels:
          kubevirt.io/domain: ${NAME}
      spec:
        domain:
          devices:
            disks:
            - disk:
              name: rootdisk
            - disk:
              name: cloudinitdisk
        terminationGracePeriodSeconds: 180
        volumes:
        - dataVolume:
            name: ${NAME}
          name: rootdisk
        - cloudInitNoCloud:
            userData: |-
              #cloud-config
              user: {{ cloudusername }}
              password: ${CLOUD_USER_PASSWORD}
              chpasswd: { expire: False }
          name: cloudinitdisk
parameters:
- description: VM name
  from: '{{ os }}-[a-z0-9]{16}'
  generate: expression
  name: NAME
- name: DATA_SOURCE_NAME
  description: Name of the DataSource to clone
  value: '{{ majorrelease }}'
- name: DATA_SOURCE_NAMESPACE
  description: Namespace of the DataSource
  value: kubevirt-os-images
- description: Randomized password for the cloud-init user {{ cloudusername }}
  from: '[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}'
  generate: expression
  name: CLOUD_USER_PASSWORD
- name: FLAVOR_NAME
  description: VirtualMachineFlavor name to associate with the VM
- name: PREFERENCE_NAME
  description: VirtualMachinePreference name to associate with the VM