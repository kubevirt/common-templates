    iconClass: "icon-{{ icon }}"
    openshift.io/provider-display-name: "KubeVirt"
    openshift.io/documentation-url: "https://github.com/kubevirt/common-templates"
    openshift.io/support-url: "https://github.com/kubevirt/common-templates/issues"
    template.openshift.io/bindable: "false"

    template.kubevirt.io/version: v1alpha1
    defaults.template.kubevirt.io/disk: rootdisk
    template.kubevirt.io/editable: |
      /objects[0].spec.template.spec.domain.cpu.sockets
      /objects[0].spec.template.spec.domain.cpu.cores
      /objects[0].spec.template.spec.domain.cpu.threads
      /objects[0].spec.template.spec.domain.resources.requests.memory
      /objects[0].spec.template.spec.domain.devices.disks
      /objects[0].spec.template.spec.volumes
      /objects[0].spec.template.spec.networks

{% for osl in oslabels %}
    name.os.template.kubevirt.io/{{ osl }}: {{ lookup('osinfo', osl).name }}
{% endfor %}

    validations: |
      [
        {
          "name": "minimal-required-memory",
          "path": "jsonpath::.spec.domain.resources.requests.memory",
          "rule": "integer",
          "message": "This VM requires more memory.",
          "min": {{ lookup('osinfo', osinfoname)["minimum_resources.0.ram"] }}
        },
      ]

  labels:
{% for osl in oslabels %}
    os.template.kubevirt.io/{{ osl }}: "true"
{% endfor %}
    workload.template.kubevirt.io/{{ item.workload }}: "true"
    flavor.template.kubevirt.io/{{ item.flavor }}: "true"
    template.kubevirt.io/type: "base"

objects:
- apiVersion: kubevirt.io/v1alpha3
  kind: VirtualMachine
  metadata:
    name: ${NAME}
    labels:
      vm.kubevirt.io/template: {{ os }}-{{ item.workload }}-{{ item.flavor }}
      app: ${NAME}
  spec:
    running: false
    template:
      metadata:
        labels:
          kubevirt.io/domain: ${NAME}
          kubevirt.io/size: {{ item.flavor }}
      spec:
        domain:
{% if item.iothreads %}
          ioThreadsPolicy: shared
{% endif %}

          cpu:
            sockets: {{ item.cpus }}
            cores: 1
            threads: 1
{% if cpumodel |default("") %}
            model: {{ cpumodel }}
{% endif %}
          resources:
            requests:
              memory: {{ item.memsize }}
          devices:
            rng: {}
{% if item.tablet %}
            inputs:
              - type: tablet
                bus: virtio
                name: tablet
{% endif %}
            disks:
            - disk:
                bus: {{ diskbus | default("virtio") }}
              name: rootdisk
            - disk:
                bus: {{ diskbus | default("virtio") }}
              name: cloudinitdisk
            interfaces:
            - bridge: {}
              name: default
        terminationGracePeriodSeconds: 0
        networks:
        - name: default
          pod: {}
        volumes:
        - name: rootdisk
          persistentVolumeClaim:
            claimName: ${PVCNAME}
        - cloudInitNoCloud:
            userData: |-
              #cloud-config
              password: {{ password }}
              chpasswd: { expire: False }
          name: cloudinitdisk

parameters:
- description: VM name
  from: '{{ os }}-[a-z0-9]{16}'
  generate: expression
  name: NAME
- name: PVCNAME
  description: Name of the PVC with the disk image
  required: true

