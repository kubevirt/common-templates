    iconClass: "icon-{{ icon }}"
    openshift.io/provider-display-name: "KubeVirt"
    openshift.io/documentation-url: "https://github.com/kubevirt/common-templates"
    openshift.io/support-url: "https://github.com/kubevirt/common-templates/issues"
    template.openshift.io/bindable: "false"

    template.cnv.io/version: v1alpha1
    defaults.template.cnv.io/disk: rootdisk
    template.cnv.io/editable: |
      /objects[0].spec.template.spec.domain.cpu.cores
      /objects[0].spec.template.spec.domain.resources.requests.memory
      /objects[0].spec.template.spec.domain.devices.disks
      /objects[0].spec.template.spec.volumes
      /objects[0].spec.template.spec.networks

{% for osl in oslabels %}
    name.os.template.cnv.io/{{ osl }}: {{ lookup('osinfo', osl).name }}
{% endfor %}

  labels:
{% for osl in oslabels %}
    os.template.cnv.io/{{ osl }}: "true"
{% endfor %}
    workload.template.cnv.io/{{ item.workload }}: "true"
    flavor.template.cnv.io/{{ item.flavor }}: "true"
    template.cnv.io/type: "base"

objects:
- apiVersion: kubevirt.io/v1alpha2
  kind: VirtualMachine
  metadata:
    name: ${NAME}
    labels:
      vm.cnv.io/template: {{ os }}-{{ item.workload }}-{{ item.flavor }}
  spec:
    running: false
    template:
      spec:
        domain:
{% if item.iothreads %}
          ioThreadsPolicy: shared
{% endif %}

          cpu:
            cores: {{ item.cores }}
{% if cpumodel |default("") %}
            model: {{ cpumodel }}
{% endif %}
          resources:
            requests:
              memory: {{ item.memsize }}
          devices:
            rng: {}
            disks:
            - disk:
                bus: virtio
              name: rootdisk
              volumeName: rootvolume
        terminationGracePeriodSeconds: 0
        volumes:
        - name: rootvolume
          persistentVolumeClaim:
            claimName: ${PVCNAME}
        - cloudInitNoCloud:
            userData: |-
              #cloud-config
              password: {{ password }}
              chpasswd: { expire: False }
          name: cloudinitvolume

parameters:
- description: VM name
  from: '{{ os }}-[a-z0-9]{16}'
  generate: expression
  name: NAME
- name: PVCNAME
  description: Name of the PVC with the disk image
  required: true

